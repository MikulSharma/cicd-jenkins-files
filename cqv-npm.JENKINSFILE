pipeline {
    agent any
    tools {
        nodejs 'nodejs-16.17.0'
    }
    triggers {
        GenericTrigger(
            genericVariables: [
                [defaultValue: '', key: 'SOURCE_BRANCH', regexpFilter: '', value: '$.pullrequest.source.branch.name'],
                [defaultValue: '', key: 'SOURCE_COMMIT_HASH', regexpFilter: '', value: '$.pullrequest.source.commit.hash'],
                [defaultValue: '', key: 'REPOSITORY_FULL_NAME', regexpFilter: '', value: '$.pullrequest.source.repository.full_name'],
                [defaultValue: '', key: 'REPOSITORY_NAME', regexpFilter: '', value: '$.repository.name']
            ],
            tokenCredentialId: 'PR_NPM_CU',
            regexpFilterText: '',
            regexpFilterExpression: '' //'refs/heads/' + 'master'
        )
    }
    stages {
        stage('Notify Bitbucket') {
            steps {
                sh "echo repository $REPOSITORY_FULL_NAME"
                sh "echo branch $SOURCE_BRANCH"
                sh "echo branch $SOURCE_COMMIT_HASH"
                bitbucketStatusNotify(buildState: 'INPROGRESS', repoSlug: "$REPOSITORY_NAME", commitId: "$SOURCE_COMMIT_HASH")
            }
        }
        stage('Build') {
            steps {
                dir("$REPOSITORY_NAME") {
                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: '$SOURCE_BRANCH' ]],
                        extensions: [],
                        userRemoteConfigs: [[credentialsId: 'Bitbucket', url: 'git@bitbucket.org:' + '$REPOSITORY_FULL_NAME' + '.git']]
                    ])
                    sh 'npm install'
                    sh 'npm run lint'
                    sh 'npm run build'
                    publishCoverage adapters: [
                        jacocoAdapter(
                            path: 'target/site/jacoco/jacoco.xml',
                            thresholds: [
                                [failUnhealthy: false, thresholdTarget: 'Conditional', unstableThreshold: 80.0],
                                [failUnhealthy: false, thresholdTarget: 'Aggregated Report', unstableThreshold: 90.0],
                                [failUnhealthy: false, thresholdTarget: 'Line', unstableThreshold: 90.0]
                            ]
                        )
                    ], failUnhealthy: false, failUnstable: true, sourceFileResolver: sourceFiles('NEVER_STORE')
                }
            }
        }
    }
    post {
        success {
            bitbucketStatusNotify(
                buildState: 'SUCCESSFUL',
                repoSlug: "$REPOSITORY_NAME",
                commitId: "$SOURCE_COMMIT_HASH"
            )
        }
        failure {
            bitbucketStatusNotify(
                buildState: 'FAILED',
                repoSlug: "$REPOSITORY_NAME",
                commitId: "$SOURCE_COMMIT_HASH"
            )
        }
    }
}
